import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

export const exportOrdersToPDF = (orders, vendorName = 'Vendor') => {
  try {
    // Create new PDF document
    const doc = new jsPDF();
    
    // Set document properties
    doc.setProperties({
      title: 'Orders Export',
      subject: 'Vendor Orders Report',
      author: 'SAMAAN System',
      creator: 'SAMAAN System'
    });

    // Add header
    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.text('SAMAAN', 20, 20);
    
    doc.setFontSize(16);
    doc.text('Orders Report', 20, 35);
    
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated for: ${vendorName}`, 20, 45);
    doc.text(`Date: ${new Date().toLocaleDateString('en-IN')}`, 20, 55);
    doc.text(`Total Orders: ${orders.length}`, 20, 65);

    // Prepare table data
    const tableData = [];
    
    orders.forEach((order) => {
      if (order.order_items && order.order_items.length > 0) {
        order.order_items.forEach((item, index) => {
          tableData.push([
            index === 0 ? `#${order.id.slice(0, 8)}` : '', // Order ID only for first item
            item.products?.name || 'Unknown Product',
            `₹${(item.unit_price || 0).toFixed(2)}`,
            item.quantity || 0,
            `₹${((item.unit_price || 0) * (item.quantity || 0)).toFixed(2)}`,
            index === 0 ? new Date(order.created_at).toLocaleDateString('en-IN') : '', // Date only for first item
            index === 0 ? getStatusLabel(order.status) : '' // Status only for first item
          ]);
        });
      } else {
        // If no order items, show order without product details
        tableData.push([
          `#${order.id.slice(0, 8)}`,
          'No items',
          '₹0.00',
          0,
          '₹0.00',
          new Date(order.created_at).toLocaleDateString('en-IN'),
          getStatusLabel(order.status)
        ]);
      }
    });

    // Add table
    autoTable(doc, {
      head: [['Order ID', 'Product', 'Unit Price', 'Quantity', 'Total', 'Date', 'Status']],
      body: tableData,
      startY: 75,
      styles: {
        fontSize: 9,
        cellPadding: 3,
      },
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold'
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245]
      },
      columnStyles: {
        0: { cellWidth: 25 }, // Order ID
        1: { cellWidth: 40 }, // Product
        2: { cellWidth: 25 }, // Unit Price
        3: { cellWidth: 20 }, // Quantity
        4: { cellWidth: 25 }, // Total
        5: { cellWidth: 25 }, // Date
        6: { cellWidth: 25 }  // Status
      }
    });

    // Add summary
    const finalY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 20 : 150;
    doc.setFontSize(12);
    doc.setTextColor(40, 40, 40);
    
    // Calculate totals
    const totalAmount = orders.reduce((sum, order) => {
      return sum + (order.order_items?.reduce((itemSum, item) => {
        return itemSum + ((item.unit_price || 0) * (item.quantity || 0));
      }, 0) || 0);
    }, 0);

    const totalItems = orders.reduce((sum, order) => {
      return sum + (order.order_items?.reduce((itemSum, item) => {
        return itemSum + (item.quantity || 0);
      }, 0) || 0);
    }, 0);

    doc.text(`Summary:`, 20, finalY);
    doc.text(`Total Orders: ${orders.length}`, 20, finalY + 10);
    doc.text(`Total Items: ${totalItems}`, 20, finalY + 20);
    doc.text(`Total Amount: ₹${totalAmount.toFixed(2)}`, 20, finalY + 30);

    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(
        `Page ${i} of ${pageCount}`,
        doc.internal.pageSize.width - 30,
        doc.internal.pageSize.height - 10
      );
      doc.text(
        'Generated by SAMAAN System',
        20,
        doc.internal.pageSize.height - 10
      );
    }

    // Generate filename with timestamp
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const filename = `orders-export-${timestamp}.pdf`;

    // Save the PDF
    doc.save(filename);
    
    return { success: true, filename };
  } catch (error) {
    console.error('Error generating PDF:', error);
    return { success: false, error: error.message };
  }
};

// Helper function to get status label
const getStatusLabel = (status) => {
  const statusMap = {
    'pending': 'Pending',
    'confirmed': 'Confirmed',
    'shipped': 'In Transit',
    'delivered': 'Delivered',
    'cancelled': 'Cancelled'
  };
  return statusMap[status] || status;
};
